import "strings"

providers = {
	"aws": {
		"alias": "",
		"config": {
			"region": {
				"references": [
					"var.aws_region",
				],
			},
		},
		"full_name":           "registry.terraform.io/hashicorp/aws",
		"module_address":      "",
		"name":                "aws",
		"provider_config_key": "aws",
		"version_constraint":  "",
	},
}

resources = {
	"aws_kms_key.s3": {
		"address": "aws_kms_key.s3",
		"config": {
			"deletion_window_in_days": {
				"constant_value": 7,
			},
			"description": {
				"constant_value": "AWS KMS Customer-managed key",
			},
			"enable_key_rotation": {
				"constant_value": false,
			},
			"is_enabled": {
				"constant_value": true,
			},
			"key_usage": {
				"constant_value": "ENCRYPT_DECRYPT",
			},
			"tags": {
				"constant_value": {
					"Owner": "rchao@hashicorp.com",
					"name":  "Roger-Test-Bucket",
				},
			},
		},
		"count":               {},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "",
		"name":                "s3",
		"provider_config_key": "aws",
		"provisioners":        [],
		"type":                "aws_kms_key",
	},
	"aws_s3_bucket.bucket": {
		"address": "aws_s3_bucket.bucket",
		"config": {
			"acl": {
				"references": [
					"var.bucket_acl",
				],
			},
			"bucket": {
				"references": [
					"var.prefix",
				],
			},
			"server_side_encryption_configuration": [
				{
					"rule": [
						{
							"apply_server_side_encryption_by_default": [
								{
									"kms_master_key_id": {
										"references": [
											"aws_kms_key.s3.arn",
											"aws_kms_key.s3",
										],
									},
									"sse_algorithm": {
										"constant_value": "aws:kms",
									},
								},
							],
						},
					],
				},
			],
			"tags": {
				"constant_value": {
					"Owner": "rchao@hashicorp.com",
					"name":  "Roger-Test-Bucket",
				},
			},
		},
		"count":               {},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "",
		"name":                "bucket",
		"provider_config_key": "aws",
		"provisioners":        [],
		"type":                "aws_s3_bucket",
	},
}

provisioners = {}

variables = {
	"aws_region": {
		"default":        "us-east-1",
		"description":    "AWS region",
		"module_address": "",
		"name":           "aws_region",
	},
	"bucket_acl": {
		"default":        "private",
		"description":    "ACL for S3 bucket: private, public-read, public-read-write, etc",
		"module_address": "",
		"name":           "bucket_acl",
	},
	"prefix": {
		"default":        "rchao",
		"description":    "",
		"module_address": "",
		"name":           "prefix",
	},
}

outputs = {
	"sse_algorithm": {
		"depends_on":     [],
		"description":    "",
		"module_address": "",
		"name":           "sse_algorithm",
		"sensitive":      false,
		"value": {
			"references": [
				"aws_s3_bucket.bucket.server_side_encryption_configuration[0].rule[0].apply_server_side_encryption_by_default[0].sse_algorithm",
				"aws_s3_bucket.bucket.server_side_encryption_configuration[0].rule[0].apply_server_side_encryption_by_default[0]",
				"aws_s3_bucket.bucket.server_side_encryption_configuration[0].rule[0].apply_server_side_encryption_by_default",
				"aws_s3_bucket.bucket.server_side_encryption_configuration[0].rule[0]",
				"aws_s3_bucket.bucket.server_side_encryption_configuration[0].rule",
				"aws_s3_bucket.bucket.server_side_encryption_configuration[0]",
				"aws_s3_bucket.bucket.server_side_encryption_configuration",
				"aws_s3_bucket.bucket",
			],
		},
	},
}

module_calls = {}

strip_index = func(addr) {
	s = strings.split(addr, ".")
	for s as i, v {
		s[i] = strings.split(v, "[")[0]
	}

	return strings.join(s, ".")
}
